/* 
 * ADIOS is freely available under the terms of the BSD license described
 * in the COPYING file in the top level directory of this source distribution.
 *
 * Copyright (c) 2008 - 2009.  UT-BATTELLE, LLC. All rights reserved.
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <float.h>
#include "mpi.h"
#include "adios_read_ext.h"
#include "adios_query.h"
//#include <alacrity.h>
#include "alacrity.h"

/**** Funcs. that are internal funcs. ********/

ADIOS_ALAC_BITMAP * adios_alac_process(ADIOS_QUERY* q, int timeStep,
		bool estimate);

ADIOS_ALAC_BITMAP * adios_alac_bitsOp(ADIOS_ALAC_BITMAP * op1,
		ADIOS_ALAC_BITMAP * op2, enum ADIOS_CLAUSE_OP_MODE operator);

uint64_t calSetBitsNum(ADIOS_ALAC_BITMAP *b1);

#define BITNSLOTS64(nb) ((nb + 64 - 1) / 64)
/**** END -- Funcs. that are internal funcs. ********/

void adios_query_init() {
	//It seems that there is nothing to do for ALARITY
}

ADIOS_QUERY* adios_query_create(ADIOS_FILE* f, uint64_t *start,
		uint64_t *count, uint64_t size, /*start & count array size*/
		const char* varName, enum ADIOS_PREDICATE_MODE op, const char* value) {//this value needs to be &int &double etc, not a string!
	assert(start);
	assert(count);
	ADIOS_QUERY * query = (ADIOS_QUERY *) malloc(sizeof(ADIOS_QUERY));
	query->f = f;
	query->size = size;
	query->_start = (uint64_t*) malloc(sizeof(uint64_t) * size);
	query->_count = (uint64_t*) malloc(sizeof(uint64_t) * size);
	memcpy(query->_start, start, sizeof(uint64_t) * size);
	memcpy(query->_count, count, sizeof(uint64_t) * size);
	query->op = op;
	query->varName = (char*) malloc(strlen(varName) + 1);
	strcpy(query->varName, varName);
	ADIOS_VARINFO * var = adios_inq_var(f, varName);
	query->var = var;

	query->_value = (char*) malloc(strlen(value) + 1);
	strcpy(query->_value, value);

	//if both left & right are empty, then, it indicates this node is leaf node,
	// otherwise, it is non-leaf node
	query->left = NULL;
	query->right = NULL;

	return query;
}

ADIOS_QUERY* common_query_create(ADIOS_FILE* f,
				 const char* varName,
				 ADIOS_SELECTION* queryBoundry,
				 enum ADIOS_PREDICATE_MODE op,
				 const char* value)
{
  if (gAdios_query_hooks == NULL) {
    printf("Error: Query environment is not initialized. Call adios_query_init() first.\n");
    exit(EXIT_FAILURE);
  }

  if (gAdios_query_hooks == ADIOS_QUERY_TOOL_FASTBIT) {
    if ((queryBoundry->type == ADIOS_SELECTION_BOUNDINGBOX) &&
	(queryBoundry->type == ADIOS_SELECTION_POINTS))
      {
	printf("Error: selection type is not supported by fastbit. Choose either boundingbox or points\n");
	exit(EXIT_FAILURE);
      }
  }

  if ((value == NULL) || (f == NULL) || (varName == NULL)) {
    printf("Error:No valid input is provided when creating query.\n");
    exit(EXIT_FAILURE);
  }
  // get data from bp file
  ADIOS_VARINFO* v = adios_inq_var(f, varName);
  if (v == NULL) {
    printf(" Error! no such var:%s \n", varName);
    exit(EXIT_FAILURE);
  }

  uint64_t total_byte_size, dataSize;
  if (queryBoundry == NULL) {

  }
  if (getTotalByteSize(v, queryBoundry, &total_byte_size, &dataSize) < 0) {
    exit(EXIT_FAILURE);
  }


  //
  // create selection in fastbit
  //
  ADIOS_QUERY* result = (ADIOS_QUERY*)calloc(1, sizeof(ADIOS_QUERY));
  result->_condition = malloc(strlen(varName)+strlen(value)+ 10); // 10 is enough for op and spaces
  if (op == ADIOS_LT) {
    sprintf(result->_condition, "(%s < %s)", varName, value);
  } else if (op == ADIOS_LTEQ) {
    sprintf(result->_condition, "(%s <= %s)", varName, value);
  } else if (op == ADIOS_GT) {
    sprintf(result->_condition, "(%s > %s)", varName, value);
  } else if (op == ADIOS_GTEQ) {
    sprintf(result->_condition, "(%s >= %s)", varName, value);
  } else if (op == ADIOS_EQ) {
    sprintf(result->_condition, "(%s = %s)", varName, value);
  } else {
    sprintf(result->_condition, "(%s != %s)", varName, value);
  }

  (result->_condition)[strlen(result->_condition)] = 0;

  result->_var = v;
  result->_f = f;

  result->_dataSlice = malloc(total_byte_size);
  result->_rawDataSize = dataSize;

  result->_sel = queryBoundry;

  result->_op = op;
  result->_value = strdup(value);

  initialize(result);
  return result;
}



/*
 * this func. only builds a subtree,  leaving users to build the entire expression tree
 * by calling this func. multiple times.
 * The effect of this function is essentially adding parentheses to the predicate
 *
 */
ADIOS_QUERY* adios_query_combine(ADIOS_QUERY* q1,
		enum ADIOS_CLAUSE_OP_MODE operator, ADIOS_QUERY* q2) {

	ADIOS_QUERY * query = (ADIOS_QUERY *) malloc(sizeof(ADIOS_QUERY));
	query->leftRightOp = operator;
	query->left = q1;
	query->right = q2;
	return query;
}

static uint8_t bits_in_char[256] = {
#   define B2(n) n,     n+1,     n+1,     n+2
#   define B4(n) B2(n), B2(n+1), B2(n+1), B2(n+2)
#   define B6(n) B4(n), B4(n+1), B4(n+1), B4(n+2)
		B6(0), B6(1), B6(1), B6(2)};

uint64_t calSetBitsNum(ADIOS_ALAC_BITMAP *b1) {

	uint64_t total = 0;
	int kk = 0;
	for (; kk < b1->length; kk++) {
		uint64_t count = bits_in_char[b1->bits[kk] & 0xff]
				+ bits_in_char[(b1->bits[kk] >> 8) & 0xff]
				+ bits_in_char[(b1->bits[kk] >> 16) & 0xff]
				+ bits_in_char[(b1->bits[kk] >> 24) & 0xff]
				+ bits_in_char[(b1->bits[kk] >> 32) & 0xff]
				+ bits_in_char[(b1->bits[kk] >> 40) & 0xff]
				+ bits_in_char[(b1->bits[kk] >> 48) & 0xff]
				+ bits_in_char[(b1->bits[kk] >> 56) & 0xff];
		total += count;
	}
	return total;
}

// Supports bitmap AND or OR operation.
// The space of second operand is freed, and the first operand serves as the results of the operation
ADIOS_ALAC_BITMAP * adios_alac_bitsOp(ADIOS_ALAC_BITMAP * op1,
		ADIOS_ALAC_BITMAP * op2, enum ADIOS_CLAUSE_OP_MODE operator) {
	if (operator == ADIOS_QUERY_OP_AND) {
		for (uint64_t i = 0; i < op1->length; i++) {
			op1[i] &= op2[i];
		}
		op1->elmSize = calSetBitsNum(op1);

	} else if (operator == ADIOS_QUERY_OP_OR) {

		for (uint64_t i = 0; i < op1->length; i++) {
			op1[i] ^= op2[i];
		}
		op1->elmSize = calSetBitsNum(op1);

	} else {
		printf("Operator[%d] is not surpported now \n ", operator);
	}
}

/*
 * PG selection, [startPG, endPG)
 */
ADIOS_ALAC_BITMAP* adios_alac_uniengine(ADIOS_QUERY * adiosQuery, int timeStep,
		int startPG, int endPG, bool estimate) {

	double lb = DBL_MIN;
	double hb = DBL_MAX;

	if (adiosQuery->op == ADIOS_LT || adiosQuery->op == ADIOS_LTEQ) {
		hb = memcpy(&hb, adiosQuery->_value, sizeof(double));
	} else if (adiosQuery->op == ADIOS_GT || adiosQuery->op == ADIOS_GTEQ) {
		lb = memcpy(&lb, adiosQuery->_value, sizeof(double));

	} else if (adiosQuery->op == ADIOS_EQ) { //following two cases are tricky to ALACRITY
		//TODO: Verify
		hb = memcpy(&hb, adiosQuery->_value, sizeof(double));
		lb = hb;
	} else if (adiosQuery->op == ADIOS_NE) {
		//TODO
	} else {
		printf("Unsupported predicate type[%d] \n", adiosQuery->op);
	}

	ALQueryEngine qe;
	ALUnivariateQuery query;
	ALQueryEngineStartUnivariateDoubleQuery(&qe, lb, hb,
			REGION_RETRIEVAL_INDEX_ONLY_QUERY_TYPE, &query);

	/*********** doQuery ***************
	 *
	 * 1. Open partition  [locate offsets of meta, data, and index for the partition]
	 * 2. Read Partition Meta from file => meta
	 3. find touched bins:  are_bins_touched = findBinRange1C(meta, uniquery, &start_bin, &end_bin);
	 4. read index of touched bins: ALPartitionStoreReadIndexBins
	 5. read dataBin
	 */

	//adios_read_set_transforms_enabled(f, 0); // load transformed 1-D byte array
	ADIOS_VARINFO * v = adiosQuery->var;
	ADIOS_VARTRANSFORM *ti = adios_inq_var_transform(adiosQuery->f, v);

	int totalPG = startPG - endPG;
	uint64_t totalElm = 1;
	for (int j = 0; j < adiosQuery->size; j++) {
		totalElm *= adiosQuery->_count[j];
	}

	ADIOS_ALAC_BITMAP alacBitmap;

	alacBitmap.length = BITNSLOTS64(totalElm);
	alacBitmap.bits = (uint64_t *) malloc(alacBitmap.length * sizeof(uint64_t));
	alacBitmap.elmSize = 0;

	printf("startPG [%d], endPG [%d] , and total PG number [%d]", startPG,
			endPG, totalPG);

	uint64_t * metaSizes = (uint64_t *) malloc(sizeof(uint64_t) * totalPG);
	uint64_t * indexSizes = (uint64_t *) malloc(sizeof(uint64_t) * totalPG);
	uint64_t * dataSizes = (uint64_t *) malloc(sizeof(uint64_t) * totalPG);
	// Will assume user providing PG range for us
	// Right now, use all PGs -> user bounding box
	int i = 0;
	ADIOS_SELECTION * sel;
	uint64_t resultCount;
	for (i = startPG; i < endPG; i++) {
		ADIOS_TRANSFORM_METADATA * tmetas = ti->transform_metadatas;
		ADIOS_TRANSFORM_METADATA tmeta = tmetas[i];
		//	assert(tmeta->length == 24);
		uint64_t * threeData = (uint64_t *) tmeta.content;
		metaSizes[i] = threeData[0];
		indexSizes[i] = threeData[1];
		dataSizes[i] = threeData[2];

		printf(
				"PG[%d] has meta size[%ul], index size[%ul], and data size[%ul] \n",
				i, metaSizes[i], indexSizes[i], dataSizes[i]);

		uint64_t metaSize = metaSizes[i];

		// transformed data has 1 dimension,
		// 1. load partition Metadata
		int ndim = 1;
		//TODO: verify the timestep here
		int startStep = timeStep, numStep = 1;
		sel = adios_selection_writeblock_bounded(i, 0, metaSize, 1);
		ALMetadata partitionMeta;
		memstream_t ms = memstreamInitReturn(malloc(metaSize));
		adios_schedule_read(adiosQuery->f, sel, adiosQuery->_value, startStep,
				numStep, ms.buf);
		adios_perform_reads(adiosQuery->f, 1);
		ALDeserializeMetadata(&partitionMeta, &ms);
		memstreamDestroy(&ms, true);

		//2. find touched bin
		bin_id_t low_bin, hi_bin;
		_Bool are_bins_touched = findBinRange1C(partitionMeta, query, &low_bin,
				&hi_bin);

		if (are_bins_touched) {

			//3. load index size
			uint64_t indexOffset = metaSize; // metadata size is index start offset

			const char insigbytes = insigBytesCeil(&partitionMeta);
			const uint64_t first_bin_off = indexOffset + ALGetIndexBinOffset(
					&partitionMeta, low_bin);
			const uint64_t last_bin_off = indexOffset + ALGetIndexBinOffset(
					&partitionMeta, hi_bin);
			const uint64_t bin_read_len = last_bin_off - first_bin_off;
			sel = adios_selection_writeblock_bounded(i, metaSize, bin_read_len,
					1);
			void *indexData = NULL;
			adios_schedule_read(adiosQuery->f, sel, adiosQuery->varName,
					startStep, numStep, indexData);
			adios_perform_reads(adiosQuery->f, 1);
			ALIndex index = (ALIndex) indexData;

			ALUnivariateQueryResult result;
			const ALBinLayout * const bl = &(partitionMeta.binLayout);
			resultCount = bl->binStartOffsets[hi_bin]
					- bl->binStartOffsets[low_bin];

			//It assumes index is compressed inverted index
			if (partitionMeta.indexMeta.indexForm == ALCompressedInvertedIndex)
				ALConvertPartialIndexForm(&partitionMeta, &index,
						ALInvertedIndex, low_bin, hi_bin);
			//bitmap represents the selection range, need to minus the base offset

			assert(adiosQuery->size);
			uint64_t ridOffset = adiosQuery->_start[0];
			// if for estimate, it will stop here
			// otherwise, continue searching for the precise results
			for (int j = 1; adiosQuery->size; j++) {
				ridOffset
						+= (adiosQuery->_start[j] * adiosQuery->_count[j - 1]);
			}

			if (estimate) {
				rid_t * idx = (rid_t *) index;
				uint64_t ni = 0;
				/*for each index, set bit as 1 at corresponding position */
				for (; ni < resultCount; ni++) {
					rid_t rid_val = idx[ni];
					rid_val -= ridOffset;
					uint32_t word = (uint32_t) (rid_val >> 6);
					alacBitmap.bits[word] |= (1LL << (rid_val & 0x3F));
				}
				alacBitmap.elmSize += resultCount;
			} else {
				//TODO: candidate check
				uint64_t firstBinElmBegin =0, firstBinElmEnd= 0,
						lastBinElmBegin = 0, lastBinElmEnd= 0;
				// It touches at least 3 bins, so, we need to check RIDs that are in first and last bins
				if ( hi_bin - low_bin > 2) {
					firstBinElmBegin =0 ; // always start first
					firstBinElmEnd =  bl->binStartOffsets[low_bin+1] - bl->binStartOffsets[low_bin];
					lastBinElmBegin = bl->binStartOffsets[hi_bin-1] - bl->binStartOffsets[low_bin];
					lastBinElmEnd  = bl->binStartOffsets[hi_bin] - bl->binStartOffsets[low_bin];
				}else { // for 1 or 2 bins touched, we need to check all RIDs
					firstBinElmBegin =0 ;
					lastBinElmBegin = 0;
					firstBinElmEnd = resultCount;
					lastBinElmEnd = resultCount;
				}

				uint64_t actualResultCount = resultCount;
				rid_t * idx2 = (rid_t *) index;
				uint64_t ni2 = 0;
				/*for each index, set bit as 1 at corresponding position */
				for (; ni2 < resultCount; ni2++) {
					if ( (ni2>= firstBinElmBegin && ni2 <= firstBinElmEnd ) ||
						((ni2>= lastBinElmBegin && ni2 <= lastBinElmEnd ))	) {
						// check the data , if data is not in the result
						// then, skip it, and decrease the actualResultCount by 1
						//TODO:
					}
					rid_t rid_val = idx[ni2];
					rid_val -= ridOffset;
					uint32_t word = (uint32_t) (rid_val >> 6);
					alacBitmap.bits[word] |= (1LL << (rid_val & 0x3F));
				}
				alacBitmap.elmSize += actualResultCount;

			}
		}

	}

	free(metaSizes);
	free(indexSizes);
	free(dataSizes);
	return &(alacBitmap);

}

/*
 * This is an internal function processing the expression tree
 */
ADIOS_ALAC_BITMAP * adios_alac_process(ADIOS_QUERY* q, int timestep, bool estimate) {

	//LEAF NODE
	if (q ->left == NULL && q->right == NULL) {
		int startPG = 0;
		int endPG = q->var->sum_nblocks;
		// TODO: use the _start
		return adios_alac_uniengine(q, startPG, endPG, timestep, estimate);

	} else if (q->right) {
		return adios_alac_process((ADIOS_QUERY*) q->right, timestep, estimate);
	} else if (q->left) {
		return adios_alac_process((ADIOS_QUERY*) q->left, timestep, estimate);
	}
}

/*
 * TODO: How to add up the estimated number on the expression tree?
 * */
int16_t adios_query_estimate(ADIOS_QUERY* q) {

	ADIOS_ALAC_BITMAP* b = adios_alac_process(q, false);
	return calSetBitsNum(b);

}

void adios_query_set_timestep(int timeStep){
	gCurrentTimeStep = timeStep;
}

int16_t adios_query_evaluate(ADIOS_QUERY* q, int timeStep, uint64_t maxResult) {

	if (maxResult == 0) {

		ADIOS_ALAC_BITMAP* b = adios_alac_process(q, timestep,   true);
		return calSetBitsNum(b);
	} else {
		//TODO
		return 0;
	}
}

/*
 *
 */
void adios_query_get_selection(ADIOS_QUERY* q, int batchSize, // limited by maxResult
		ADIOS_SELECTION* result) {
	//TODO
}
